name: Docker Build on Release and Schedule

on:
  release:
    types: [created]
  schedule:
    - cron: '0 0 1 * *'

env:
  IMAGE_NAME: chadfrownfelter/hello-world

jobs:
  build-and-push:
    name: Build and Push Multi-Arch Image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Get latest release tag
        id: get_latest_tag
        if: github.event_name != 'release'
        run: |
          TAG=$(gh release view --json tagName --jq .tagName)
          if [ -z "$TAG" ]; then
            echo "No releases found. Cannot proceed with scheduled build."
            exit 1
          fi
          echo "tag_name=${TAG}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Check out correct source code
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'release' && github.ref_name || steps.get_latest_tag.outputs.tag_name }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate Docker image tags
        id: meta
        run: |
          # triggered by a new GitHub Release (e.g., 1.2.3)
          if [[ "${{ github.event_name }}" == "release" ]]; then
            RELEASE_TAG="${{ github.ref_name }}"
            TAGS=$(echo "
            ${{ env.IMAGE_NAME }}:${RELEASE_TAG}
            ${{ env.IMAGE_NAME }}:latest
            " | sed '/^$/d' | paste -sd ',' -)

          # triggered by schedule or manual run
          else
            LATEST_RELEASE_TAG="${{ steps.get_latest_tag.outputs.tag_name }}"
            BUILD_DATE=$(date +'%Y%m%d')
            TAGS=$(echo "
            ${{ env.IMAGE_NAME }}:${LATEST_RELEASE_TAG}-${BUILD_DATE}
            ${{ env.IMAGE_NAME }}:${LATEST_RELEASE_TAG}
            ${{ env.IMAGE_NAME }}:latest
            " | sed '/^$/d' | paste -sd ',' -)
          fi
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "Generated tags: ${TAGS}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          pull: true
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
